import { TransactionError, PublicKey, SimulatedTransactionResponse, RpcResponseAndContext, VersionedTransaction } from "@solana/web3.js";
export interface JsonRpcContext {
    apiVersion: number;
    slot: number;
}
export interface JsonRpcError {
    code: number;
    message: string;
}
export type JsonRpcResponse<T> = {
    id: number;
    jsonrpc: string;
    result: RpcResponseAndContext<T>;
} | {
    id: number;
    jsonrpc: string;
    error: JsonRpcError;
};
export interface RpcSimulateBundleResult {
    summary: "succeeded" | {
        failed: {
            error: any;
            txSignature?: string;
        };
    };
    transactionResults: RpcSimulateBundleTransactionResult[];
}
export interface RpcSimulateBundleTransactionResult {
    err?: TransactionError;
    logs: string[];
    preExecutionAccounts?: any;
    postExecutionAccounts?: any;
    unitsConsumed?: string;
    returnData?: any;
}
export interface RpcSimulateBundleConfig {
    preExecutionAccountsConfigs: (RpcSimulateTransactionAccountsConfig | undefined)[];
    postExecutionAccountsConfigs: (RpcSimulateTransactionAccountsConfig | undefined)[];
    transactionEncoding?: any;
    simulationBank?: SimulationSlotConfig;
    skipSigVerify?: boolean;
    replaceRecentBlockhash?: boolean;
}
export interface RpcSimulateTransactionAccountsConfig {
    encoding?: any;
    addresses: string[];
}
export type SimulationSlotConfig = "confirmed" | "processed" | number;
export declare function simulateBundle(rpcEndpoint: string, transactions: VersionedTransaction[], includeAccounts?: Array<PublicKey>): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;
//# sourceMappingURL=bundles.d.ts.map