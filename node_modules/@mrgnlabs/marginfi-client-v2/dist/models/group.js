"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarginfiGroup = void 0;
const anchor_1 = require("@coral-xyz/anchor");
const bn_js_1 = __importDefault(require("bn.js"));
const types_1 = require("../types");
const mrgn_common_1 = require("@mrgnlabs/mrgn-common");
const instructions_1 = __importDefault(require("../instructions"));
const constants_1 = require("../constants");
const bank_1 = require("./bank");
// ----------------------------------------------------------------------------
// Client types
// ----------------------------------------------------------------------------
class MarginfiGroup {
    constructor(admin, address) {
        this.admin = admin;
        this.address = address;
    }
    // ----------------------------------------------------------------------------
    // Factories
    // ----------------------------------------------------------------------------
    static fromAccountParsed(address, accountData) {
        const marginfiGroup = {
            admin: accountData.admin,
        };
        return new MarginfiGroup(marginfiGroup.admin, address);
    }
    static fromBuffer(address, rawData, idl) {
        const data = MarginfiGroup.decode(rawData, idl);
        return MarginfiGroup.fromAccountParsed(address, data);
    }
    static decode(encoded, idl) {
        const coder = new anchor_1.BorshCoder(idl);
        return coder.accounts.decode(types_1.AccountType.MarginfiGroup, encoded);
    }
    static async encode(decoded, idl) {
        const coder = new anchor_1.BorshCoder(idl);
        return await coder.accounts.encode(types_1.AccountType.MarginfiGroup, decoded);
    }
    // ----------------------------------------------------------------------------
    // Admin actions
    // ----------------------------------------------------------------------------
    async makeEnableFlashLoanForAccountIx(program, marginfiAccountAddress) {
        const ix = await instructions_1.default.makeSetAccountFlagIx(program, {
            marginfiGroup: this.address,
            marginfiAccount: marginfiAccountAddress,
            admin: this.admin,
        }, { flag: new bn_js_1.default(constants_1.FLASHLOAN_ENABLED_FLAG) });
        return {
            instructions: [ix],
            keys: [],
        };
    }
    async makeDisableFlashLoanForAccountIx(program, marginfiAccountAddress) {
        const ix = await instructions_1.default.makeUnsetAccountFlagIx(program, {
            marginfiGroup: this.address,
            marginfiAccount: marginfiAccountAddress,
            admin: this.admin,
        }, { flag: new bn_js_1.default(constants_1.FLASHLOAN_ENABLED_FLAG) });
        return {
            instructions: [ix],
            keys: [],
        };
    }
    async makeEnableAccountTransferForAccountIx(program, marginfiAccountAddress) {
        const ix = await instructions_1.default.makeSetAccountFlagIx(program, {
            marginfiGroup: this.address,
            marginfiAccount: marginfiAccountAddress,
            admin: this.admin,
        }, { flag: new bn_js_1.default(constants_1.TRANSFER_ACCOUNT_AUTHORITY_FLAG) });
        return {
            instructions: [ix],
            keys: [],
        };
    }
    async makeDisableAccountTransferForAccountIx(program, marginfiAccountAddress) {
        const ix = await instructions_1.default.makeUnsetAccountFlagIx(program, {
            marginfiGroup: this.address,
            marginfiAccount: marginfiAccountAddress,
            admin: this.admin,
        }, { flag: new bn_js_1.default(constants_1.TRANSFER_ACCOUNT_AUTHORITY_FLAG) });
        return {
            instructions: [ix],
            keys: [],
        };
    }
    async makePoolConfigureBankIxb(program, bank, args) {
        const ix = await instructions_1.default.makePoolConfigureBankIx(program, {
            marginfiGroup: this.address,
            admin: this.admin,
            bank: bank,
        }, { bankConfigOpt: args });
        return {
            instructions: [ix],
            keys: [],
        };
    }
    async makePoolAddBankIx(program, bankPubkey, bankMint, bankConfig, overrideOpt) {
        let rawBankConfig = (0, bank_1.serializeBankConfigOpt)(bankConfig);
        const rawBankConfigCompact = {
            ...rawBankConfig,
            oracleKey: rawBankConfig.oracle?.keys[0],
            oracleSetup: rawBankConfig.oracle?.setup,
            oracleMaxAge: 120,
            auto_padding_0: [0],
            auto_padding_1: [0],
        };
        const ix = await instructions_1.default.makePoolAddBankIx(program, {
            marginfiGroup: overrideOpt.groupAddress ?? this.address,
            admin: overrideOpt.admin ?? this.admin,
            feePayer: overrideOpt.admin ?? this.admin,
            bankMint: bankMint,
            bank: bankPubkey,
            tokenProgram: mrgn_common_1.TOKEN_PROGRAM_ID,
            oracleKey: rawBankConfigCompact.oracleKey,
        }, {
            bankConfig: rawBankConfigCompact,
        });
        return {
            instructions: [ix], //ix
            keys: [],
        };
    }
}
exports.MarginfiGroup = MarginfiGroup;
